create table "public"."bookmark" (
    "id" bigint generated by default as identity not null,
    "created_at" timestamp with time zone not null default now(),
    "url" text not null,
    "title" text not null,
    "description" text,
    "image" text,
    "category" bigint,
    "user_id" uuid not null default auth.uid(),
    "public" boolean not null default false
);


alter table "public"."bookmark" enable row level security;

CREATE UNIQUE INDEX bookmark_pkey ON public.bookmark USING btree (id);

alter table "public"."bookmark" add constraint "bookmark_pkey" PRIMARY KEY using index "bookmark_pkey";

alter table "public"."bookmark" add constraint "bookmark_user_id_fkey" FOREIGN KEY (user_id) REFERENCES auth.users(id) not valid;

alter table "public"."bookmark" validate constraint "bookmark_user_id_fkey";

grant delete on table "public"."bookmark" to "anon";

grant insert on table "public"."bookmark" to "anon";

grant references on table "public"."bookmark" to "anon";

grant select on table "public"."bookmark" to "anon";

grant trigger on table "public"."bookmark" to "anon";

grant truncate on table "public"."bookmark" to "anon";

grant update on table "public"."bookmark" to "anon";

grant delete on table "public"."bookmark" to "authenticated";

grant insert on table "public"."bookmark" to "authenticated";

grant references on table "public"."bookmark" to "authenticated";

grant select on table "public"."bookmark" to "authenticated";

grant trigger on table "public"."bookmark" to "authenticated";

grant truncate on table "public"."bookmark" to "authenticated";

grant update on table "public"."bookmark" to "authenticated";

grant delete on table "public"."bookmark" to "service_role";

grant insert on table "public"."bookmark" to "service_role";

grant references on table "public"."bookmark" to "service_role";

grant select on table "public"."bookmark" to "service_role";

grant trigger on table "public"."bookmark" to "service_role";

grant truncate on table "public"."bookmark" to "service_role";

grant update on table "public"."bookmark" to "service_role";

create policy "Enable insert for users based on user_id"
on "public"."bookmark"
as permissive
for insert
to public
with check ((( SELECT auth.uid() AS uid) = user_id));


create policy "Enable users to view their own data only"
on "public"."bookmark"
as permissive
for select
to authenticated
using ((( SELECT auth.uid() AS uid) = user_id));


create policy "provide public bookmark"
on "public"."bookmark"
as permissive
for select
to public
using (public);



